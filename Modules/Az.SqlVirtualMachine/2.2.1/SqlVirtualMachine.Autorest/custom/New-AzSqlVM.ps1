
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or updates a SQL virtual machine.
.Description
Creates or updates a SQL virtual machine.

If you are updating an existing SQL virtual machine and a parameter such as -Tag is omitted, then the previously defined values may be removed. For this reason, it is recommended to use [Update-AzSqlVM](https://learn.microsoft.com/powershell/module/az.sqlvirtualmachine/update-azsqlvm) to prevent overwriting of unintended parameters.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachine
.Link
https://learn.microsoft.com/powershell/module/az.sqlvirtualmachine/new-azsqlvm
#>
function New-AzSqlVM {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachine])]
    [CmdletBinding(DefaultParameterSetName = 'CreateExpanded', PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
    param(
        [Parameter(Mandatory)]
        [Alias('SqlVirtualMachineName', 'SqlVMName')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Path')]
        [System.String]
        # Name of the SQL virtual machine.
        ${Name},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Path')]
        [System.String]
        # Name of the resource group that contains the resource.
        # You can obtain this value from the Azure Resource Manager API or the portal.
        ${ResourceGroupName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
        [System.String]
        # Subscription ID that identifies an Azure subscription.
        ${SubscriptionId},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Resource location.
        ${Location},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable R services (SQL 2016 onwards).
        ${AdditionalFeatureServerConfigurationIsRServicesEnabled},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable SQL best practices Assessment feature on SQL virtual machine.
        ${AssessmentSettingEnable},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Run SQL best practices Assessment immediately on SQL virtual machine.
        ${AssessmentSettingRunImmediately},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType]
        # Backup schedule type.
        ${AutoBackupSettingBackupScheduleType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Include or exclude system databases from auto backup.
        ${AutoBackupSettingBackupSystemDb},

        [Parameter()]
        [AllowEmptyCollection()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek[]]
        # Days of the week for the backups when FullBackupFrequency is set to Weekly.
        ${AutoBackupSettingDaysOfWeek},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable autobackup on SQL virtual machine.
        ${AutoBackupSettingEnable},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable encryption for backup on SQL virtual machine.
        ${AutoBackupSettingEnableEncryption},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType]
        # Frequency of full backups.
        # In both cases, full backups begin during the next scheduled time window.
        ${AutoBackupSettingFullBackupFrequency},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Start time of a given day during which full backups can take place.
        # 0-23 hours.
        ${AutoBackupSettingFullBackupStartTime},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Duration of the time window of a given day during which full backups can take place.
        # 1-23 hours.
        ${AutoBackupSettingFullBackupWindowHour},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Frequency of log backups.
        # 5-60 minutes.
        ${AutoBackupSettingLogBackupFrequency},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Security.SecureString]
        # Password for encryption on backup.
        ${AutoBackupSettingPassword},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Retention period of backup: 1-90 days.
        ${AutoBackupSettingRetentionPeriod},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Storage account key where backup will be taken to.
        ${AutoBackupSettingStorageAccessKey},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Storage account url where backup will be taken to.
        ${AutoBackupSettingStorageAccountUrl},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Storage container name where backup will be taken to.
        ${AutoBackupSettingStorageContainerName},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek]
        # Day of week to apply the patch on.
        ${AutoPatchingSettingDayOfWeek},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable autopatching on SQL virtual machine.
        ${AutoPatchingSettingEnable},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Duration of patching.
        ${AutoPatchingSettingMaintenanceWindowDuration},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Hour of the day when patching is initiated.
        # Local VM time.
        ${AutoPatchingSettingMaintenanceWindowStartingHour},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # The client Id of the Managed Identity to query Microsoft Graph API.
        # An empty string must be used for the system assigned Managed Identity
        ${AzureAdAuthenticationSettingClientId},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable automatic upgrade of Sql IaaS extension Agent.
        ${EnableAutomaticUpgrade},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.IdentityType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.IdentityType]
        # The identity type.
        # Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
        ${IdentityType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Azure Key Vault url.
        ${KeyVaultCredentialSettingAzureKeyVaultUrl},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Credential name.
        ${KeyVaultCredentialSettingCredentialName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable key vault credential setting.
        ${KeyVaultCredentialSettingEnable},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Service principal name to access key vault.
        ${KeyVaultCredentialSettingServicePrincipalName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Service principal name secret to access key vault.
        ${KeyVaultCredentialSettingServicePrincipalSecret},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode]
        # SQL IaaS Agent least privilege mode.
        ${LeastPrivilegeMode},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType]
        # SQL Server license type.
        ${LicenseType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL image offer.
        # Examples include SQL2016-WS2016, SQL2017-WS2016.
        ${Offer},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek]
        # Day of the week to run assessment.
        ${ScheduleDayOfWeek},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Enable or disable assessment schedule on SQL virtual machine.
        ${ScheduleEnable},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Occurrence of the DayOfWeek day within a month to schedule assessment.
        # Takes values: 1,2,3,4 and -1.
        # Use -1 for last DayOfWeek day of the month
        ${ScheduleMonthlyOccurrence},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Time of the day in HH:mm format.
        # Eg.
        # 17:30
        ${ScheduleStartTime},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Number of weeks to schedule between 2 assessment runs.
        # Takes value from 1-6
        ${ScheduleWeeklyInterval},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku]
        # SQL Server edition type.
        ${Sku},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType]
        # SQL Server connectivity option.
        ${SqlConnectivityUpdateSettingConnectivityType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server port.
        ${SqlConnectivityUpdateSettingPort},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Security.SecureString]
        # SQL Server sysadmin login password.
        ${SqlConnectivityUpdateSettingSqlAuthUpdatePassword},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server sysadmin login to create.
        ${SqlConnectivityUpdateSettingSqlAuthUpdateUserName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server default file path
        ${SqlDataSettingDefaultFilePath},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32[]]
        # Logical Unit Numbers for the disks.
        ${SqlDataSettingLun},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server Collation.
        ${SqlInstanceSettingCollation},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # SQL Server IFI.
        ${SqlInstanceSettingIsIfiEnabled},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # SQL Server LPIM.
        ${SqlInstanceSettingIsLpimEnabled},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # SQL Server Optimize for Adhoc workloads.
        ${SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server MAXDOP.
        ${SqlInstanceSettingMaxDop},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server maximum memory.
        ${SqlInstanceSettingMaxServerMemoryMb},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server minimum memory.
        ${SqlInstanceSettingMinServerMemoryMb},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server default file path
        ${SqlLogSettingDefaultFilePath},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32[]]
        # Logical Unit Numbers for the disks.
        ${SqlLogSettingLun},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode]
        # SQL Server Management type.
        ${SqlManagementType},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType]
        # Disk configuration to apply to SQL Server.
        ${SqlStorageUpdateSettingDiskConfigurationType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Virtual machine disk count.
        ${SqlStorageUpdateSettingDiskCount},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # Device id of the first disk to be updated.
        ${SqlStorageUpdateSettingStartingDeviceId},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server tempdb data file count
        ${SqlTempDbSettingDataFileCount},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server tempdb data file size
        ${SqlTempDbSettingDataFileSize},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server tempdb data file autoGrowth size
        ${SqlTempDbSettingDataGrowth},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server default file path
        ${SqlTempDbSettingDefaultFilePath},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server tempdb log file size
        ${SqlTempDbSettingLogFileSize},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32]
        # SQL Server tempdb log file autoGrowth size
        ${SqlTempDbSettingLogGrowth},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Int32[]]
        # Logical Unit Numbers for the disks.
        ${SqlTempDbSettingLun},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # SQL Server tempdb persist folder choice
        ${SqlTempDbSettingPersistFolder},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # SQL Server tempdb persist folder location
        ${SqlTempDbSettingPersistFolderPath},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
        ${SqlVirtualMachineGroupResourceId},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType]
        # SQL Server workload type.
        ${SqlWorkloadTypeUpdateSettingSqlWorkloadType},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType]
        # Disk configuration to apply to SQL Server.
        ${StorageConfigurationSettingDiskConfigurationType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # SQL Server SystemDb Storage on DataPool if true.
        ${StorageConfigurationSettingSqlSystemDbOnDataDisk},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType])]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType]
        # Storage workload type.
        ${StorageConfigurationSettingStorageWorkloadType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(PossibleTypes = ([Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITrackedResourceTags]))]
        [System.Collections.Hashtable]
        # Resource tags.
        ${Tag},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Security.SecureString]
        # Cluster bootstrap account password.
        ${WsfcDomainCredentialsClusterBootstrapAccountPassword},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Security.SecureString]
        # Cluster operator account password.
        ${WsfcDomainCredentialsClusterOperatorAccountPassword},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.Security.SecureString]
        # SQL service account password.
        ${WsfcDomainCredentialsSqlServiceAccountPassword},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Body')]
        [System.String]
        # Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        ${WsfcStaticIP},

        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The credentials, account, tenant, and subscription used for communication with Azure.
        ${DefaultProfile},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    process {
        if ($PSBoundParameters.ContainsKey("ResourceGroupName") -and $PSBoundParameters.ContainsKey("Name")) {
            $ResourceGroupName = $PSBoundParameters["ResourceGroupName"]
            $Name = $PSBoundParameters["Name"]
            $SubscriptionId = (Get-AzContext).Subscription.Id
            $VirtualMachineResourceId = "/subscriptions/${SubscriptionId}/resourceGroups/${ResourceGroupName}/providers/Microsoft.Compute/virtualMachines/${Name}"
            $PSBoundParameters.Add("VirtualMachineResourceId", $VirtualMachineResourceId)
        }
        Az.SqlVirtualMachine.internal\New-AzSqlVM @PSBoundParameters
    }

}

# SIG # Begin signature block
# MIInvwYJKoZIhvcNAQcCoIInsDCCJ6wCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCCn78xURVmZvi2D
# Jn9zDnKLkY96JJY1AXHSoda2viSWr6CCDXYwggX0MIID3KADAgECAhMzAAADrzBA
# DkyjTQVBAAAAAAOvMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjMxMTE2MTkwOTAwWhcNMjQxMTE0MTkwOTAwWjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQDOS8s1ra6f0YGtg0OhEaQa/t3Q+q1MEHhWJhqQVuO5amYXQpy8MDPNoJYk+FWA
# hePP5LxwcSge5aen+f5Q6WNPd6EDxGzotvVpNi5ve0H97S3F7C/axDfKxyNh21MG
# 0W8Sb0vxi/vorcLHOL9i+t2D6yvvDzLlEefUCbQV/zGCBjXGlYJcUj6RAzXyeNAN
# xSpKXAGd7Fh+ocGHPPphcD9LQTOJgG7Y7aYztHqBLJiQQ4eAgZNU4ac6+8LnEGAL
# go1ydC5BJEuJQjYKbNTy959HrKSu7LO3Ws0w8jw6pYdC1IMpdTkk2puTgY2PDNzB
# tLM4evG7FYer3WX+8t1UMYNTAgMBAAGjggFzMIIBbzAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQURxxxNPIEPGSO8kqz+bgCAQWGXsEw
# RQYDVR0RBD4wPKQ6MDgxHjAcBgNVBAsTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEW
# MBQGA1UEBRMNMjMwMDEyKzUwMTgyNjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
# tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5j
# b20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEG
# CCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQu
# Y29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0
# MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAISxFt/zR2frTFPB45Yd
# mhZpB2nNJoOoi+qlgcTlnO4QwlYN1w/vYwbDy/oFJolD5r6FMJd0RGcgEM8q9TgQ
# 2OC7gQEmhweVJ7yuKJlQBH7P7Pg5RiqgV3cSonJ+OM4kFHbP3gPLiyzssSQdRuPY
# 1mIWoGg9i7Y4ZC8ST7WhpSyc0pns2XsUe1XsIjaUcGu7zd7gg97eCUiLRdVklPmp
# XobH9CEAWakRUGNICYN2AgjhRTC4j3KJfqMkU04R6Toyh4/Toswm1uoDcGr5laYn
# TfcX3u5WnJqJLhuPe8Uj9kGAOcyo0O1mNwDa+LhFEzB6CB32+wfJMumfr6degvLT
# e8x55urQLeTjimBQgS49BSUkhFN7ois3cZyNpnrMca5AZaC7pLI72vuqSsSlLalG
# OcZmPHZGYJqZ0BacN274OZ80Q8B11iNokns9Od348bMb5Z4fihxaBWebl8kWEi2O
# PvQImOAeq3nt7UWJBzJYLAGEpfasaA3ZQgIcEXdD+uwo6ymMzDY6UamFOfYqYWXk
# ntxDGu7ngD2ugKUuccYKJJRiiz+LAUcj90BVcSHRLQop9N8zoALr/1sJuwPrVAtx
# HNEgSW+AKBqIxYWM4Ev32l6agSUAezLMbq5f3d8x9qzT031jMDT+sUAoCw0M5wVt
# CUQcqINPuYjbS1WgJyZIiEkBMIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkq
# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
# IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
# Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC
# CgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03
# a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akr
# rnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0Rrrg
# OGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy
# 4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9
# sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAh
# dCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8k
# A/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTB
# w3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmn
# Eyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
# lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0w
# ggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2o
# ynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD
# VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBa
# BgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2Ny
# bC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsG
# AQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
# L3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNV
# HSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsG
# AQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
# AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKb
# C5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11l
# hJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6
# I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0
# wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560
# STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQam
# ASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGa
# J+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ah
# XJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA
# 9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33Vt
# Y5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
# /Xmfwb1tbWrJUnMTDXpQzTGCGZ8wghmbAgEBMIGVMH4xCzAJBgNVBAYTAlVTMRMw
# EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
# aWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNp
# Z25pbmcgUENBIDIwMTECEzMAAAOvMEAOTKNNBUEAAAAAA68wDQYJYIZIAWUDBAIB
# BQCgga4wGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEO
# MAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIN1Z0dVhod3/Te/dQa62gq8I
# qOlqbvpfJ3RyZsx/nJnmMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkAYwByAG8A
# cwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20wDQYJKoZIhvcNAQEB
# BQAEggEAUpUu4zetdi0s5juz0YIkiiEJ7oJ+4nLcr1qzRoRz3GxJNklqNGVPOTDt
# EOsabJvExMomROJy1zKPIKVU86Oz5VAXtrgCNvAkOA9X6sTz0f84YSilWHb+Yyhz
# 8KpkX+LG7F5GTBSlrm6viEn8AbGUp/swfTOrZfli58Kx6/PLd2cEhBsjREj4UHN6
# R7mtEXTNZIx5InqHJlqDloOAnp+5X3yMpTX01gAeJSLRw1ZHKO3sVooSFFryqtge
# RWqDi2PXS9shE7Wz2Y2Vf26odS+TlrQe/YpwFtauy2zlqfx3Z5c+tL/Ub8qQCAgz
# O3VrR8A5ggAaxDwE4+LfKxXd4GFmX6GCFykwghclBgorBgEEAYI3AwMBMYIXFTCC
# FxEGCSqGSIb3DQEHAqCCFwIwghb+AgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFZBgsq
# hkiG9w0BCRABBKCCAUgEggFEMIIBQAIBAQYKKwYBBAGEWQoDATAxMA0GCWCGSAFl
# AwQCAQUABCAD3ClogB+a0MS8NX5RBD3XTWARn0AnNAFC5SryHh0eBgIGZiAsyD+0
# GBMyMDI0MDQyMzEzMTUxNi40ODNaMASAAgH0oIHYpIHVMIHSMQswCQYDVQQGEwJV
# UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
# ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJl
# bGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNO
# OkQwODItNEJGRC1FRUJBMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBT
# ZXJ2aWNloIIReDCCBycwggUPoAMCAQICEzMAAAHcweCMwl9YXo4AAQAAAdwwDQYJ
# KoZIhvcNAQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwHhcNMjMx
# MDEyMTkwNzA2WhcNMjUwMTEwMTkwNzA2WjCB0jELMAkGA1UEBhMCVVMxEzARBgNV
# BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
# c29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3Bl
# cmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpEMDgyLTRC
# RkQtRUVCQTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCC
# AiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAIvIsyA1sjg9kSKJzelrUWF5
# ShqYWL83amn3SE5JyIVPUC7F6qTcLphhHZ9idf21f0RaGrU8EHydF8NxPMR2KVNi
# AtCGPJa8kV1CGvn3beGB2m2ltmqJanG71mAywrkKATYniwKLPQLJ00EkXw5TSwfm
# JXbdgQLFlHyfA5Kg+pUsJXzqumkIvEr0DXPvptAGqkdFLKwo4BTlEgnvzeTfXukz
# X8vQtTALfVJuTUgRU7zoP/RFWt3WagahZ6UloI0FC8XlBQDVDX5JeMEsx7jgJDdE
# nK44Y8gHuEWRDq+SG9Xo0GIOjiuTWD5uv3vlEmIAyR/7rSFvcLnwAqMdqcy/iqQP
# MlDOcd0AbniP8ia1BQEUnfZT3UxyK9rLB/SRiKPyHDlg8oWwXyiv3+bGB6dmdM61
# ur6nUtfDf51lPcKhK4Vo83pOE1/niWlVnEHQV9NJ5/DbUSqW2RqTUa2O2KuvsyRG
# MEgjGJA12/SqrRqlvE2fiN5ZmZVtqSPWaIasx7a0GB+fdTw+geRn6Mo2S6+/bZEw
# S/0IJ5gcKGinNbfyQ1xrvWXPtXzKOfjkh75iRuXourGVPRqkmz5UYz+R5ybMJWj+
# mfcGqz2hXV8iZnCZDBrrnZivnErCMh5Flfg8496pT0phjUTH2GChHIvE4SDSk2hw
# WP/uHB9gEs8p/9Pe/mt9AgMBAAGjggFJMIIBRTAdBgNVHQ4EFgQU6HPSBd0OfEX3
# uNWsdkSraUGe3dswHwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYD
# VR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9j
# cmwvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwG
# CCsGAQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQu
# Y29tL3BraW9wcy9jZXJ0cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIw
# MjAxMCgxKS5jcnQwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8EDDAKBggrBgEFBQcD
# CDAOBgNVHQ8BAf8EBAMCB4AwDQYJKoZIhvcNAQELBQADggIBANnrb8Ewr8eX/H1s
# Kt3rnwTDx4AqgHbkMNQo+kUGwCINXS3y1GUcdqsK/R1g6Tf7tNx1q0NpKk1JTupU
# JfHdExKtkuhHA+82lT7yISp/Y74dqJ03RCT4Q+8ooQXTMzxiewfErVLt8Wefebnc
# ST0i6ypKv87pCYkxM24bbqbM/V+M5VBppCUs7R+cETiz/zEA1AbZL/viXtHmryA0
# CGd+Pt9c+adsYfm7qe5UMnS0f/YJmEEMkEqGXCzyLK+dh+UsFi0d4lkdcE+Zq5JN
# jIHesX1wztGVAtvX0DYDZdN2WZ1kk+hOMblUV/L8n1YWzhP/5XQnYl03AfXErn+1
# Eatylifzd3ChJ1xuGG76YbWgiRXnDvCiwDqvUJevVRY1qy4y4vlVKaShtbdfgPyG
# eeJ/YcSBONOc0DNTWbjMbL50qeIEC0lHSpL2rRYNVu3hsHzG8n5u5CQajPwx9Pzp
# sZIeFTNHyVF6kujI4Vo9NvO/zF8Ot44IMj4M7UX9Za4QwGf5B71x57OjaX53gxT4
# vzoHvEBXF9qCmHRgXBLbRomJfDn60alzv7dpCVQIuQ062nyIZKnsXxzuKFb0TjXW
# w6OFpG1bsjXpOo5DMHkysribxHor4Yz5dZjVyHANyKo0bSrAlVeihcaG5F74SZT8
# FtyHAW6IgLc5w/3D+R1obDhKZ21WMIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJ
# mQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
# Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
# dCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNh
# dGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1
# WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
# UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQD
# Ex1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEB
# BQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjK
# NVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhg
# fWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJp
# rx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/d
# vI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka9
# 7aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKR
# Hh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9itu
# qBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyO
# ArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItb
# oKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6
# bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6t
# AgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQW
# BBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacb
# UzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYz
# aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnku
# aHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIA
# QwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2
# VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwu
# bWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEw
# LTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93
# d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYt
# MjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/q
# XBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6
# U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVt
# I1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis
# 9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTp
# kbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0
# sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138e
# W0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJ
# sWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7
# Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0
# dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQ
# tB1VM1izoXBm8qGCAtQwggI9AgEBMIIBAKGB2KSB1TCB0jELMAkGA1UEBhMCVVMx
# EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
# FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxh
# bmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjpE
# MDgyLTRCRkQtRUVCQTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
# dmljZaIjCgEBMAcGBSsOAwIaAxUAHDn/cz+3yRkIUCJfSbL3djnQEqaggYMwgYCk
# fjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
# UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQD
# Ex1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDANBgkqhkiG9w0BAQUFAAIF
# AOnRQkowIhgPMjAyNDA0MjMwNDA4NDJaGA8yMDI0MDQyNDA0MDg0MlowdDA6Bgor
# BgEEAYRZCgQBMSwwKjAKAgUA6dFCSgIBADAHAgEAAgIUTDAHAgEAAgISBDAKAgUA
# 6dKTygIBADA2BgorBgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZCgMCoAowCAIBAAID
# B6EgoQowCAIBAAIDAYagMA0GCSqGSIb3DQEBBQUAA4GBAKdfQ6krn/9XKU8Iy031
# XFlG85OEXSoh4dBGaqeGlD943dkMdlPnjE+MNokMWYaQ0JNKwtpMkAnPoDcyylCP
# CELlR54i9KaOR7WJp72VKtL04H/EbopdGU86A523FLhAdtVx7+UUaWwr/s7KcbHa
# SrCmgPUrOzaTxyDnHHkwJ3OWMYIEDTCCBAkCAQEwgZMwfDELMAkGA1UEBhMCVVMx
# EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
# FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
# U3RhbXAgUENBIDIwMTACEzMAAAHcweCMwl9YXo4AAQAAAdwwDQYJYIZIAWUDBAIB
# BQCgggFKMBoGCSqGSIb3DQEJAzENBgsqhkiG9w0BCRABBDAvBgkqhkiG9w0BCQQx
# IgQgYBcuntdh4cxV8p6fXtYS1pW9gTY91b3WMPxuFb1+Pr8wgfoGCyqGSIb3DQEJ
# EAIvMYHqMIHnMIHkMIG9BCBTpxeKatlEP4y8qZzjuWL0Ou0IqxELDhX2TLylxIIN
# NzCBmDCBgKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAw
# DgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
# JjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB3MHg
# jMJfWF6OAAEAAAHcMCIEIMlj5Czdui1+yXOeEgNyO7aqtd0QRMsB+0i74NsgRz7z
# MA0GCSqGSIb3DQEBCwUABIICAGRY5g38w4Arp3p3ILsqxqurePuSEnQo73dbB0wP
# KxggJUe1oH/hwHAPR+JgHjHjHvEA3zjGvwUvSyMPNmkoEHM/aLOE1eXRwj+z5IMC
# 9iOj7t+2rJL+BE+MvqqtNReNH/AyH4efE29RZK5VvOY3LwJTBqFrux13o+oiJnv5
# viGuHKcv5JDKO5PNiX0Fa0zRyrZygGQFlXnuSpi+jgwYZbiz2b0VYWimCu90XLHu
# 5eVXxFKIXhP4pv0WP0klJyPdAomy8DkpxgPyOsbuu9HG7bX6SlNvlsVJGC2UiW1n
# tBDGXShWmRMkv8L85uh6ybzc7Uan/n2tkFwPXaKO2fuKrQ1SHt4iQtuqRgIFI1FL
# 7eWYlUZsGiawdIbHBh929Ba63LftYNcPt4AKYtKSZFxB3KLfchYWLfm3vYrbCw6t
# 8AccHNIC8UC010czCq4Mef8VIUdld3COwns6/7JZleHSLYsVTITupFOq1teoXECC
# Xfd8gBX1gDX84F9oLtg2obPqFo8V9Jzszx3bhkpUiqG8fPNPbIrbq0DYWE+FasG3
# 5vTSXwp35F55SqtIKfMQjGo//A8oIe2sqbl2t1p8EZ/kqWG3uvT0pQBJt+XaXp53
# d3FGpcvqrKnItF9c5Kuo6IBmDnNsr6V/cDiu2o2hPto+F0RHCjnhZjixcTFgFoCE
# Ymir
# SIG # End signature block
